locals {
  # Module Locals
  linux_virtual_machine_data   = merge([for k, v in var.linux_virtual_machine_data : { for i in range(v.qty) : "${v.computer_name_prefix}${format("%02d", v.start + i)}" => v if v.enabled }]...)
  linux_virtual_machine_output = { for key, value in azurerm_linux_virtual_machine.linux_virtual_machine : value.name => value }

  # Submodule locals
  availability_set_data                             = { for k, v in var.linux_virtual_machine_data : "${v.computer_name_prefix}${try(v.availability_set_data.name_suffix)}" => merge(try(v.availability_set_data, null), { resource_group_name = v.resource_group_name, location = v.location, tags = v.tags }) if v.enabled && try(v.availability_set_data.enabled, false) }
  managed_disk_data                                 = merge([for vm, data in(local.linux_virtual_machine_data) : { for disk in try(keys(data.managed_disk_data), {}) : "${vm}${lookup(data.managed_disk_data, disk).name_suffix}" => merge(lookup(data.managed_disk_data, disk), { resource_group_name = data.resource_group_name, location = data.location, tags = data.tags }) }]...)
  network_interface_data                            = merge([for vm, data in(local.linux_virtual_machine_data) : { for nic in try(keys(data.network_interface_data), {}) : "${vm}${lookup(data.network_interface_data, nic).name_suffix}" => merge(lookup(data.network_interface_data, nic), { resource_group_name = data.resource_group_name, location = data.location, tags = data.tags }) }]...)
  virtual_machine_data_disk_attachment_data         = merge([for vm, data in(local.linux_virtual_machine_data) : { for disk in try(keys(data.managed_disk_data), {}) : "${vm}${lookup(data.managed_disk_data, disk).name_suffix}" => merge(lookup(data.managed_disk_data, disk), { virtual_machine_name = vm, tags = data.tags }) }]...)
  tls_private_key_data                              = merge([for vm, data in(local.linux_virtual_machine_data) : { for key, value in coalesce(data.admin_ssh_key, {}) : "${try(value.tls_private_key.new_secret.unique_per_system, false) == true ? "${vm}${try(value.tls_private_key.new_secret.name_suffix)}" : "${data.computer_name_prefix}${try(value.tls_private_key.new_secret.name_suffix)}"}" => merge(try(value.tls_private_key.new_secret, {}), { enabled = value.enabled }) if value.enabled && try(value.tls_private_key.new_secret != null, false) }]...)
  virtual_machine_extension_data                    = merge([for vm, data in(local.linux_virtual_machine_data) : { for ext in try(keys(data.virtual_machine_extension_data), {}) : "${vm}${lookup(data.virtual_machine_extension_data, ext).name_suffix}" => merge(lookup(data.virtual_machine_extension_data, ext), { virtual_machine_name = vm, tags = data.tags }) }]...)
  network_interface_security_group_association_data = merge([for vm, data in(local.linux_virtual_machine_data) : { for nic in try(keys(data.network_interface_data), {}) : "${vm}${lookup(data.network_interface_data, nic).name_suffix}" => lookup(data.network_interface_data, nic) if lookup(data.network_interface_data, nic).enabled && (lookup(data.network_interface_data, nic).network_security_group_name != null || lookup(data.network_interface_data, nic).network_security_group_id != null) }]...)

  #Future modules
  #key_vault_data                            = merge([for vm, data in({ for k, v in var.linux_virtual_machine_data : v.computer_name_prefix => v if v.enabled }) : { for admin_key, admin_data in data.admin_ssh_key : "${vm}${try(admin_data.tls_private_key.new_secret.new_key_vault.name_suffix, "")}" => merge(try(admin_data.tls_private_key.new_secret.new_key_vault, {}), { enabled = admin_data.enabled, resource_group_name = coalesce(try(admin_data.tls_private_key.new_secret.new_key_vault.resource_group_name, null), data.resource_group_name), location = data.location }) if admin_data.enabled && try(admin_data.tls_private_key.new_secret.new_key_vault != null, false) }]...)

}