locals {
  defaults_merge = {
    api_management                                             = { for k, v in var.api_management_data : k => merge(v, try(local.tags_used["api_management"], false) ? { tags = merge(var.global_defaults.tags, var.environment_defaults.tags, v.tags) } : {}) }
    api_management_v2                                          = { for k, v in var.api_management_data_v2 : k => merge(v, try(local.tags_used["api_management_v2"], false) ? { tags = merge(var.global_defaults.tags, var.environment_defaults.tags, v.tags) } : {}) }
    application_gateway                                        = { for k, v in var.application_gateway_data : k => merge(v, try(local.tags_used["application_gateway"], false) ? { tags = merge(var.global_defaults.tags, var.environment_defaults.tags, v.tags) } : {}) }
    availability_set                                           = { for k, v in var.availability_set_data : k => merge(v, try(local.tags_used["availability_set"], false) ? { tags = merge(var.global_defaults.tags, var.environment_defaults.tags, v.tags) } : {}) }
    azurerm_linux_virtual_machine                              = { for k, v in var.azurerm_linux_virtual_machine_data : k => merge(v, try(local.tags_used["azurerm_linux_virtual_machine"], false) ? { tags = merge(var.global_defaults.tags, var.environment_defaults.tags, v.tags) } : {}) }
    backup_policy_vm                                           = { for k, v in var.backup_policy_vm_data : k => merge(v, try(local.tags_used["backup_policy_vm"], false) ? { tags = merge(var.global_defaults.tags, var.environment_defaults.tags, v.tags) } : {}) }
    data_protection_backup_vault                               = { for k, v in var.data_protection_backup_vault_data : k => merge(v, try(local.tags_used["data_protection_backup_vault"], false) ? { tags = merge(var.global_defaults.tags, var.environment_defaults.tags, v.tags) } : {}) }
    eventhub                                                   = { for k, v in var.eventhub_data : k => merge(v, try(local.tags_used["eventhub"], false) ? { tags = merge(var.global_defaults.tags, var.environment_defaults.tags, v.tags) } : {}) }
    express_route_circuit_authorization                        = { for k, v in var.express_route_circuit_authorization_data : k => merge(v, try(local.tags_used["express_route_circuit_authorization"], false) ? { tags = merge(var.global_defaults.tags, var.environment_defaults.tags, v.tags) } : {}) }
    express_route_connection                                   = { for k, v in var.express_route_connection_data : k => merge(v, try(local.tags_used["express_route_connection"], false) ? { tags = merge(var.global_defaults.tags, var.environment_defaults.tags, v.tags) } : {}) }
    firewall                                                   = { for k, v in var.firewall_data : k => merge(v, try(local.tags_used["firewall"], false) ? { tags = merge(var.global_defaults.tags, var.environment_defaults.tags, v.tags) } : {}) }
    firewall_policy                                            = { for k, v in var.firewall_policy_data : k => merge(v, try(local.tags_used["firewall_policy"], false) ? { tags = merge(var.global_defaults.tags, var.environment_defaults.tags, v.tags) } : {}) }
    firewall_policy_rule_collection_group                      = { for k, v in var.firewall_policy_rule_collection_group_data : k => merge(v, try(local.tags_used["firewall_policy_rule_collection_group"], false) ? { tags = merge(var.global_defaults.tags, var.environment_defaults.tags, v.tags) } : {}) }
    key_vault                                                  = { for k, v in var.key_vault_data : k => merge(v, try(local.tags_used["key_vault"], false) ? { tags = merge(var.global_defaults.tags, var.environment_defaults.tags, v.tags) } : {}) }
    key_vault_access_policy                                    = { for k, v in var.key_vault_access_policy_data : k => merge(v, try(local.tags_used["key_vault_access_policy"], false) ? { tags = merge(var.global_defaults.tags, var.environment_defaults.tags, v.tags) } : {}) }
    key_vault_certificate                                      = { for k, v in var.key_vault_certificate_data : k => merge(v, try(local.tags_used["key_vault_certificate"], false) ? { tags = merge(var.global_defaults.tags, var.environment_defaults.tags, v.tags) } : {}) }
    key_vault_key                                              = { for k, v in var.key_vault_key_data : k => merge(v, try(local.tags_used["key_vault_key"], false) ? { tags = merge(var.global_defaults.tags, var.environment_defaults.tags, v.tags) } : {}) }
    key_vault_managed_hardware_security_module                 = { for k, v in var.key_vault_managed_hardware_security_module_data : k => merge(v, try(local.tags_used["key_vault_managed_hardware_security_module"], false) ? { tags = merge(var.global_defaults.tags, var.environment_defaults.tags, v.tags) } : {}) }
    key_vault_managed_hardware_security_module_role_assignment = { for k, v in var.key_vault_managed_hardware_security_module_role_assignment_data : k => merge(v, try(local.tags_used["key_vault_managed_hardware_security_module_role_assignment"], false) ? { tags = merge(var.global_defaults.tags, var.environment_defaults.tags, v.tags) } : {}) }
    key_vault_secret                                           = { for k, v in var.key_vault_secret_data : k => merge(v, try(local.tags_used["key_vault_secret"], false) ? { tags = merge(var.global_defaults.tags, var.environment_defaults.tags, v.tags) } : {}) }
    lb                                                         = { for k, v in var.lb_data : k => merge(v, try(local.tags_used["lb"], false) ? { tags = merge(var.global_defaults.tags, var.environment_defaults.tags, v.tags) } : {}) }
    lb_frontend_ip_configuration                               = { for k, v in var.lb_frontend_ip_configuration_data : k => merge(v, try(local.tags_used["lb_frontend_ip_configuration"], false) ? { tags = merge(var.global_defaults.tags, var.environment_defaults.tags, v.tags) } : {}) }
    lb_backend_address_pool                                    = { for k, v in var.lb_backend_address_pool_data : k => merge(v, try(local.tags_used["lb_backend_address_pool"], false) ? { tags = merge(var.global_defaults.tags, var.environment_defaults.tags, v.tags) } : {}) }
    lb_backend_address_pool_address                            = { for k, v in var.lb_backend_address_pool_address_data : k => merge(v, try(local.tags_used["lb_backend_address_pool_address"], false) ? { tags = merge(var.global_defaults.tags, var.environment_defaults.tags, v.tags) } : {}) }
    lb_probe                                                   = { for k, v in var.lb_probe_data : k => merge(v, try(local.tags_used["lb_probe"], false) ? { tags = merge(var.global_defaults.tags, var.environment_defaults.tags, v.tags) } : {}) }
    lb_rule                                                    = { for k, v in var.lb_rule_data : k => merge(v, try(local.tags_used["lb_rule"], false) ? { tags = merge(var.global_defaults.tags, var.environment_defaults.tags, v.tags) } : {}) }
    linux_virtual_machine                                      = { for k, v in var.linux_virtual_machine_data : k => merge(v, try(local.tags_used["linux_virtual_machine"], false) ? { tags = merge(var.global_defaults.tags, var.environment_defaults.tags, v.tags) } : {}) }
    local_network_gateway                                      = { for k, v in var.local_network_gateway_data : k => merge(v, try(local.tags_used["local_network_gateway"], false) ? { tags = merge(var.global_defaults.tags, var.environment_defaults.tags, v.tags) } : {}) }
    log_analytics_workspace                                    = { for k, v in var.log_analytics_workspace_data : k => merge(v, try(local.tags_used["log_analytics_workspace"], false) ? { tags = merge(var.global_defaults.tags, var.environment_defaults.tags, v.tags) } : {}) }
    managed_disk                                               = { for k, v in var.managed_disk_data : k => merge(v, try(local.tags_used["managed_disk"], false) ? { tags = merge(var.global_defaults.tags, var.environment_defaults.tags, v.tags) } : {}) }
    management_lock                                            = { for k, v in var.management_lock_data : k => merge(v, try(local.tags_used["management_lock"], false) ? { tags = merge(var.global_defaults.tags, var.environment_defaults.tags, v.tags) } : {}) }
    marketplace_agreement                                      = { for k, v in var.marketplace_agreement_data : k => merge(v, try(local.tags_used["marketplace_agreement"], false) ? { tags = merge(var.global_defaults.tags, var.environment_defaults.tags, v.tags) } : {}) }
    monitor_activity_log_alert                                 = { for k, v in var.monitor_activity_log_alert_data : k => merge(v, try(local.tags_used["monitor_activity_log_alert"], false) ? { tags = merge(var.global_defaults.tags, var.environment_defaults.tags, v.tags) } : {}) }
    monitor_diagnostic_setting                                 = { for k, v in var.monitor_diagnostic_setting_data : k => merge(v, try(local.tags_used["monitor_diagnostic_setting"], false) ? { tags = merge(var.global_defaults.tags, var.environment_defaults.tags, v.tags) } : {}) }
    mssql_firewall_rule                                        = { for k, v in var.mssql_firewall_rule_data : k => merge(v, try(local.tags_used["mssql_firewall_rule"], false) ? { tags = merge(var.global_defaults.tags, var.environment_defaults.tags, v.tags) } : {}) }
    mssql_server                                               = { for k, v in var.mssql_server_data : k => merge(v, try(local.tags_used["mssql_server"], false) ? { tags = merge(var.global_defaults.tags, var.environment_defaults.tags, v.tags) } : {}) }
    mssql_server_extended_auditing_policy                      = { for k, v in var.mssql_server_extended_auditing_policy_data : k => merge(v, try(local.tags_used["mssql_server_extended_auditing_policy"], false) ? { tags = merge(var.global_defaults.tags, var.environment_defaults.tags, v.tags) } : {}) }
    mssql_server_security_alert_policy                         = { for k, v in var.mssql_server_security_alert_policy_data : k => merge(v, try(local.tags_used["mssql_server_security_alert_policy"], false) ? { tags = merge(var.global_defaults.tags, var.environment_defaults.tags, v.tags) } : {}) }
    mssql_virtual_network_rule                                 = { for k, v in var.mssql_virtual_network_rule_data : k => merge(v, try(local.tags_used["mssql_virtual_network_rule"], false) ? { tags = merge(var.global_defaults.tags, var.environment_defaults.tags, v.tags) } : {}) }
    nat_gateway                                                = { for k, v in var.nat_gateway_data : k => merge(v, try(local.tags_used["nat_gateway"], false) ? { tags = merge(var.global_defaults.tags, var.environment_defaults.tags, v.tags) } : {}) }
    nat_gateway_public_ip_prefix_association                   = { for k, v in var.nat_gateway_public_ip_prefix_association_data : k => merge(v, try(local.tags_used["nat_gateway_public_ip_prefix_association"], false) ? { tags = merge(var.global_defaults.tags, var.environment_defaults.tags, v.tags) } : {}) }
    network_interface                                          = { for k, v in var.network_interface_data : k => merge(v, try(local.tags_used["network_interface"], false) ? { tags = merge(var.global_defaults.tags, var.environment_defaults.tags, v.tags) } : {}) }
    network_interface_backend_address_pool_association         = { for k, v in var.network_interface_backend_address_pool_association_data : k => merge(v, try(local.tags_used["network_interface_backend_address_pool_association"], false) ? { tags = merge(var.global_defaults.tags, var.environment_defaults.tags, v.tags) } : {}) }
    network_interface_security_group_association               = { for k, v in var.network_interface_security_group_association_data : k => merge(v, try(local.tags_used["network_interface_security_group_association"], false) ? { tags = merge(var.global_defaults.tags, var.environment_defaults.tags, v.tags) } : {}) }
    network_security_group                                     = { for k, v in var.network_security_group_data : k => merge(v, try(local.tags_used["network_security_group"], false) ? { tags = merge(var.global_defaults.tags, var.environment_defaults.tags, v.tags) } : {}) }
    network_security_rule                                      = { for k, v in var.network_security_rule_data : k => merge(v, try(local.tags_used["network_security_rule"], false) ? { tags = merge(var.global_defaults.tags, var.environment_defaults.tags, v.tags) } : {}) }
    network_watcher_flow_log                                   = { for k, v in var.network_watcher_flow_log_data : k => merge(v, try(local.tags_used["network_watcher_flow_log"], false) ? { tags = merge(var.global_defaults.tags, var.environment_defaults.tags, v.tags) } : {}) }
    palo_alto                                                  = { for k, v in var.palo_alto_data : k => merge(v, try(local.tags_used["palo_alto"], false) ? { tags = merge(var.global_defaults.tags, var.environment_defaults.tags, v.tags) } : {}) }
    palo_alto_virtual_machine_data_disk_attachment             = { for k, v in var.palo_alto_virtual_machine_data_disk_attachment_data : k => merge(v, try(local.tags_used["palo_alto_virtual_machine_data_disk_attachment"], false) ? { tags = merge(var.global_defaults.tags, var.environment_defaults.tags, v.tags) } : {}) }
    private_dns_resolver                                       = { for k, v in var.private_dns_resolver_data : k => merge(v, try(local.tags_used["private_dns_resolver"], false) ? { tags = merge(var.global_defaults.tags, var.environment_defaults.tags, v.tags) } : {}) }
    private_dns_resolver_dns_forwarding_ruleset                = { for k, v in var.private_dns_resolver_dns_forwarding_ruleset_data : k => merge(v, try(local.tags_used["private_dns_resolver_dns_forwarding_ruleset"], false) ? { tags = merge(var.global_defaults.tags, var.environment_defaults.tags, v.tags) } : {}) }
    private_dns_resolver_forwarding_rule                       = { for k, v in var.private_dns_resolver_forwarding_rule_data : k => merge(v, try(local.tags_used["private_dns_resolver_forwarding_rule"], false) ? { tags = merge(var.global_defaults.tags, var.environment_defaults.tags, v.tags) } : {}) }
    private_dns_resolver_outbound_endpoint                     = { for k, v in var.private_dns_resolver_outbound_endpoint_data : k => merge(v, try(local.tags_used["private_dns_resolver_outbound_endpoint"], false) ? { tags = merge(var.global_defaults.tags, var.environment_defaults.tags, v.tags) } : {}) }
    private_dns_resolver_virtual_network_link                  = { for k, v in var.private_dns_resolver_virtual_network_link_data : k => merge(v, try(local.tags_used["private_dns_resolver_virtual_network_link"], false) ? { tags = merge(var.global_defaults.tags, var.environment_defaults.tags, v.tags) } : {}) }
    private_endpoint                                           = { for k, v in var.private_endpoint_data : k => merge(v, try(local.tags_used["private_endpoint"], false) ? { tags = merge(var.global_defaults.tags, var.environment_defaults.tags, v.tags) } : {}) }
    public_ip                                                  = { for k, v in var.public_ip_data : k => merge(v, try(local.tags_used["public_ip"], false) ? { tags = merge(var.global_defaults.tags, var.environment_defaults.tags, v.tags) } : {}) }
    public_ip_prefix                                           = { for k, v in var.public_ip_prefix_data : k => merge(v, try(local.tags_used["public_ip_prefix"], false) ? { tags = merge(var.global_defaults.tags, var.environment_defaults.tags, v.tags) } : {}) }
    recovery_services_vault                                    = { for k, v in var.recovery_services_vault_data : k => merge(v, try(local.tags_used["recovery_services_vault"], false) ? { tags = merge(var.global_defaults.tags, var.environment_defaults.tags, v.tags) } : {}) }
    resource_group                                             = { for k, v in var.resource_group_data : k => merge(v, try(local.tags_used["resource_group"], false) ? { tags = merge(var.global_defaults.tags, var.environment_defaults.tags, v.tags) } : {}) }
    role_assignment                                            = { for k, v in var.role_assignment_data : k => merge(v, try(local.tags_used["role_assignment"], false) ? { tags = merge(var.global_defaults.tags, var.environment_defaults.tags, v.tags) } : {}) }
    route_table                                                = { for k, v in var.route_table_data : k => merge(v, try(local.tags_used["route_table"], false) ? { tags = merge(var.global_defaults.tags, var.environment_defaults.tags, v.tags) } : {}) }
    ssh_public_key                                             = { for k, v in var.ssh_public_key_data : k => merge(v, try(local.tags_used["ssh_public_key"], false) ? { tags = merge(var.global_defaults.tags, var.environment_defaults.tags, v.tags) } : {}) }
    storage_account                                            = { for k, v in var.storage_account_data : k => merge(v, try(local.tags_used["storage_account"], false) ? { tags = merge(var.global_defaults.tags, var.environment_defaults.tags, v.tags) } : {}) }
    storage_container                                          = { for k, v in var.storage_container_data : k => merge(v, try(local.tags_used["storage_container"], false) ? { tags = merge(var.global_defaults.tags, var.environment_defaults.tags, v.tags) } : {}) }
    storage_share                                              = { for k, v in var.storage_share_data : k => merge(v, try(local.tags_used["storage_share"], false) ? { tags = merge(var.global_defaults.tags, var.environment_defaults.tags, v.tags) } : {}) }
    storage_share_directory                                    = { for k, v in var.storage_share_directory_data : k => merge(v, try(local.tags_used["storage_share_directory"], false) ? { tags = merge(var.global_defaults.tags, var.environment_defaults.tags, v.tags) } : {}) }
    subnet                                                     = { for k, v in var.subnet_data : k => merge(v, try(local.tags_used["subnet"], false) ? { tags = merge(var.global_defaults.tags, var.environment_defaults.tags, v.tags) } : {}) }
    subnet_nat_gateway_association                             = { for k, v in var.subnet_nat_gateway_association_data : k => merge(v, try(local.tags_used["subnet_nat_gateway_association"], false) ? { tags = merge(var.global_defaults.tags, var.environment_defaults.tags, v.tags) } : {}) }
    subnet_network_security_group_association                  = { for k, v in var.subnet_network_security_group_association_data : k => merge(v, try(local.tags_used["subnet_network_security_group_association"], false) ? { tags = merge(var.global_defaults.tags, var.environment_defaults.tags, v.tags) } : {}) }
    subnet_route_table_association                             = { for k, v in var.subnet_route_table_association_data : k => merge(v, try(local.tags_used["subnet_route_table_association"], false) ? { tags = merge(var.global_defaults.tags, var.environment_defaults.tags, v.tags) } : {}) }
    tls_private_key                                            = { for k, v in var.tls_private_key_data : k => merge(v, try(local.tags_used["tls_private_key"], false) ? { tags = merge(var.global_defaults.tags, var.environment_defaults.tags, v.tags) } : {}) }
    user_assigned_identity                                     = { for k, v in var.user_assigned_identity_data : k => merge(v, try(local.tags_used["user_assigned_identity"], false) ? { tags = merge(var.global_defaults.tags, var.environment_defaults.tags, v.tags) } : {}) }
    virtual_machine_extension                                  = { for k, v in var.virtual_machine_extension_data : k => merge(v, try(local.tags_used["virtual_machine_extension"], false) ? { tags = merge(var.global_defaults.tags, var.environment_defaults.tags, v.tags) } : {}) }
    virtual_network                                            = { for k, v in var.virtual_network_data : k => merge(v, try(local.tags_used["virtual_network"], false) ? { tags = merge(var.global_defaults.tags, var.environment_defaults.tags, v.tags) } : {}) }
    virtual_network_gateway                                    = { for k, v in var.virtual_network_gateway_data : k => merge(v, try(local.tags_used["virtual_network_gateway"], false) ? { tags = merge(var.global_defaults.tags, var.environment_defaults.tags, v.tags) } : {}) }
    virtual_network_gateway_connection                         = { for k, v in var.virtual_network_gateway_connection_data : k => merge(v, try(local.tags_used["virtual_network_gateway_connection"], false) ? { tags = merge(var.global_defaults.tags, var.environment_defaults.tags, v.tags) } : {}) }
    virtual_network_peering                                    = { for k, v in var.virtual_network_peering_data : k => merge(v, try(local.tags_used["virtual_network_peering"], false) ? { tags = merge(var.global_defaults.tags, var.environment_defaults.tags, v.tags) } : {}) }
    windows_virtual_machine                                    = { for k, v in var.windows_virtual_machine_data : k => merge(v, try(local.tags_used["windows_virtual_machine"], false) ? { tags = merge(var.global_defaults.tags, var.environment_defaults.tags, v.tags) } : {}) }
  }
}
